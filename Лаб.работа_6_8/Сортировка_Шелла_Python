#Сортировка Шелла (Shellsort), исходный код был написан на C++, ниже представлена его реализация на Python
def shell_sort(arr):  # функция, реализующая сортировку Шелла
    n = len(arr)  # сохраняем длину массива в переменную
    gap = n // 2  # начальный шаг между элементами — половина длины массива

    # начинаем с большого промежутка и постепенно уменьшаем его
    while gap > 0:  # пока шаг больше 0, продолжаем сортировку
        for i in range(gap, n):  # проходим по всем элементам, начиная с индекса gap
            temp = arr[i]  # сохраняем текущий элемент
            j = i  # начинаем поиск правильного места для вставки элемента с текущей позиции

            # сдвигаем элементы, которые больше temp, вправо
            while j >= gap and arr[j - gap] > temp:  # пока не вышли за границу и левый элемент больше temp
                arr[j] = arr[j - gap]  # сдвигаем элемент вправо на gap позиций
                j -= gap  # двигаемся влево на gap, чтобы сравнить следующий элемент
            arr[j] = temp  # вставляем temp на найденное место

        gap //= 2  # уменьшаем шаг вдвое


def print_array(arr):  # функция для вывода массива
    print(" ".join(map(str, arr)))  # преобразуем числа в строки, соединяем пробелами и выводим


if __name__ == "__main__":  # эта строка гарантирует, что код ниже выполнится только при прямом запуске файла
    arr = [12, 34, 54, 2, 3]  # создаем исходный массив
    print("Исходный массив:")  # выводим строку
    print_array(arr)  # выводим исходный массив

    shell_sort(arr)  # вызываем функцию сортировки

    print("Отсортированный массив:")  # выводим строку
    print_array(arr)  # выводим отсортированный массив
