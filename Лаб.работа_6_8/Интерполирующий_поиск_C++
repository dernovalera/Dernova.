//Интерполирующий поиск, исходный код был написан на Python, ниже представлена его реализация на C++
#include <Windows.h>  // подключаем библиотеку для русского языка
#include <iostream>  // подключение библиотеки для ввода-вывода
#include <vector>  // подключение библиотеки для использования контейнера vector

int interpolationSearch(const std::vector<int>& arr, int lo, int hi, int x) {  // функция интерполяционного поиска
    if (lo <= hi && x >= arr[lo] && x <= arr[hi]) {  // проверка условий, чтобы избежать ошибок деления и выхода за границы
        int pos = lo + ((hi - lo) * (x - arr[lo])) / (arr[hi] - arr[lo]);   // вычисляем предполагаемое положение элемента
        if (arr[pos] == x) {  //  если элемент найден
            return pos;  // возвращаем его
        }
        if (arr[pos] < x) {  // если элемент на позиции меньше искомого
            return interpolationSearch(arr, pos + 1, hi, x);  // ищем справа
        }
        if (arr[pos] > x) {  // если элемент на позиции больше искомого
            return interpolationSearch(arr, lo, pos - 1, x);  // ищем слева
        }
    }
    return -1;  // если элемент не найден, возвращаем -1
}

int main() {  // старт программы
    SetConsoleCP(65001);  // чтобы вводить на русском языке
    SetConsoleOutputCP(65001);  // чтобы выводить на русском языке
    std::vector<int> arr = {1, 2, 4, 7, 13, 15};  // пример отсортированного массива
    int x = 13; // число, которое ищем

    int index = interpolationSearch(arr, 0, arr.size() - 1, x);  // вызов функции поиска

    if (index != -1) {  // если число найдено
        std::cout << "Элемент " << x << " найден на позиции: " << index << std::endl;  // выводится оно и его индекс
    } else {  // иначе
        std::cout << "Элемент " << x << " не найден" << std::endl;  // сообщается об отсутствии элемента
    }
    return 0;
}
