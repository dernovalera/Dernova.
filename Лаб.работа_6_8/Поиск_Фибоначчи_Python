#Поиск по Фибоначчи, исходный код был написан на C++, ниже представлена его реализация на Python
def fibonacci(n):  # объявляем функцию для генерации числа Фибоначчи для нуля и положительных n
    if n <= 1:  # для n = 0 или n = 1
        return n  # возвращаем сам n
    fib = [0] * (n + 2)  # создаем список из n + 2 элементов для хранения чисел Фибоначчи
    fib[0] = 0  # число Фибоначчи для 0 — 0
    fib[1] = 1  # число Фибоначчи для 1 — 1
    for i in range(2, n + 1):  # цикл с 2 до n включительно
        fib[i] = fib[i - 1] + fib[i - 2]  # сумма двух предыдущих для получения следующего числа
    return fib[n]  # возвращаем n-е число Фибоначчи

def fibonacci_search(arr, x):  # функция поиска элемента методом Фибоначчи
    n = len(arr)  # получаем длину массива
    # находим минимальное число Фибоначчи >= n
    fib_m2 = 0  # (m-2)-е число Фибоначчи
    fib_m1 = 1  # (m-1)-е число Фибоначчи
    fib_m = fib_m2 + fib_m1  # m-е число Фибоначчи

    while fib_m < n:  # ищем минимальное fib_m >= длины массива
        fib_m2 = fib_m1  # обновляем предыдущее число
        fib_m1 = fib_m  # обновляем текущее, чтобы вычислить следующее
        fib_m = fib_m2 + fib_m1  # получаем следующее число Фибоначчи

    offset = -1  # индекс, с которого начинаем поиск, -1 означает, что еще ничего не проверяли

    while fib_m > 1:  # пока есть диапазон для поиска
        i = min(offset + fib_m2, n - 1)   # предполагаемый индекс элемента для сравнения

        if arr[i] < x:  # если значение в массиве меньше искомого
            fib_m = fib_m1  # уменьшаем диапазон, исключая левую часть
            fib_m1 = fib_m2  # обновляем fib_m1
            fib_m2 = fib_m - fib_m1  # обновляем fib_m2
            offset = i  # сдвигаемся на текущий индекс
        elif arr[i] > x:  # если значение больше искомого
            fib_m = fib_m2  # исключаем диапазон слева
            fib_m1 = fib_m1 - fib_m2  # обновляем fib_m1
            fib_m2 = fib_m - fib_m1  # обновляем fib_m2
        else:  # если найден элемент
            return i  # возвращаем индекс

    # проверяем последний оставшийся элемент
    if fib_m1 == 1 and offset + 1 < n and arr[offset + 1] == x:
        return offset + 1

    return -1  # если не нашли подходящий элемент, возвращаем -1

arr = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]  # исходный массив
x = 85  # число, которое ищем
result = fibonacci_search(arr, x)  # запускаем функцию для поиска элемента, это и будет результат
if result != -1:  # если результат не -1
    print(f"Элемент найден на позиции: {result}")  # выводится позиция элемента, который ищем
else:  # иначе
    print("Элемент не найден")  # выводится сообщение об отсутствии элемента
