//Сортировка слиянием (Merge Sort), исходный код был написан на Python, ниже представлена его реализация на Java
public class Main {
    public static void mergeSort(int[] arr, int left, int right) {  // объявляет метод для сортировки методом "слияния" (делит и сортирует)
        if (left < right) {  // если левый индекс меньше правого, то есть что сортировать
            int mid = left + (right - left) / 2;  // середина массива (для деления пополам)

            mergeSort(arr, left, mid);  // сортируем левую половину массива
            mergeSort(arr, mid + 1, right);  // сортируем правую половину массива

            merge(arr, left, mid, right);  // соединяем отсортированные половины
        }
    }

    private static void merge(int[] arr, int left, int mid, int right) {  // объявляем метод, который объединяет две отсортированные части массива в один окончательный массив        // Размеры подмассивов
        int n1 = mid - left + 1;  // размер левого подмассива
        int n2 = right - mid;  // размер правого подмассива

        // создание временных массивов для хранения частей исходного массива, их размер = длине соответствующих подмассивов
        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        for (int i = 0; i < n1; i++)  // перебираем все элементы массива
            leftArray[i] = arr[left + i];  // копируем их во временный массив
        for (int j = 0; j < n2; j++)  // перебираем все элементы массива
            rightArray[j] = arr[mid + 1 + j];  // копируем их во временный массив

        int i = 0, j = 0;  // создаем счетчики для прохода по массивам: i для leftArray, j для rightArray, и k для итогового массива
        int k = left;

        while (i < n1 && j < n2) {  // пока есть элементы в обеих частях
            if (leftArray[i] <= rightArray[j]) {  // если текущий элемент из leftArray меньше или равен текущему из rightArray
                arr[k] = leftArray[i];  // записываем его в массив по позиции k (слева)
                i++;  // переход к следующему элементу
            } else {
                arr[k] = rightArray[j];  // иначе записываем элемент из rightArray
                j++;  // переход к следующему элементу
            }
            k++;  // после вставки элемента двигаемся дальше (на следующую позицию)
        }
        // после этого цикла остаются элементы, которые еще не скопированы, потому что массивы могут быть разной длины, поэтому
        while (i < n1) {  // пока есть элементы в leftArra
            arr[k] = leftArray[i];  // копируем их в массив
            i++;
            k++;
        }

        while (j < n2) {  // пока есть элементы в rightArray
            arr[k] = rightArray[j];  // копируем их в массив
            j++;
            k++;
        }
    }
    private static void printArray(int[] arr) {  // метод для отображения массива
        for (int value : arr) {   // перебираем все элементы массива
            System.out.print(value + " ");  // выводим их с пробелом
        }
        System.out.println();  // перекидывает на новую строчку
    }
    public static void main(String[] args) {  // старт программы
        int[] array = {38, 27, 43, 3, 9, 82, 10};  // исходный массив

        System.out.println("Исходный массив:");  // выводится строчка
        printArray(array);  // выводится исходный массив

        mergeSort(array, 0, array.length - 1); //вызываем метод сортировки для всего массива

        System.out.println("Отсортированный массив:");  // выводится строчка
        printArray(array);  // выводится отсортированный массив
    }

}
